dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
library(feather)
library(data.table)
library(fst)
library(readr)
# The first two entries are the total user and system CPU
# times of the current R process and any child processes on
# which it has waited, and the third entry is the ‘real’ elapsed time since the process was started.
#
# The definition of ‘user’ and ‘system’ times is from your OS.
# Typically it is something like The ‘user time’ is the CPU time
# charged for the execution of user instructions of the calling process.
# The ‘system time’ is the CPU time charged for execution by the system on behalf of the calling process.
nr_of_rows <- 1e6
library(tidyr)
df <- data.frame(
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
)
timer <- function(expr){
res <- system.time(expr)
as.numeric(res[3]) #%>% round(9)
}
# fst
fstwrite <- timer(write.fst(df, "dataset.fst"))
fstread  <- timer(read.fst("dataset.fst"))
#fread
dtwrite <- timer(fwrite(df, "dataset.csv"))
dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
hchart(read_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Read time in S for 1.000.000 rows"))
read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d<- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d$genres %>% unique
View(d)
View(d)
movies <- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
shiny::runApp('R/r_scripts/andersen')
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
install.packages("openssl")
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='marieandersen',
token='734E7E72566F4C93F5463E878F70B3B8',
secret='lzqHukEhepEgcyT4YQxX4N5hCMeM+/7Yd1QqDUuc')
install.packages("shiny")
install.packages("promises")
install.packages("later")
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("later")
install.packages("shiny")
install.packages("shinymaterial")
install.packages("shinyjs")
remotes::install_github('yihui/xaringan')
install.packages("remotes")
remotes::install_github('yihui/xaringan')
install.packages("DT")
library(dplyr)
install.packages("dplyr")
install.packages("readxl")
install.packages("plotly")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(readr)
library(DT)
shower <- function(df){
datatable(df %>% head(5), options = list(dom='tp'), rownames = F)
}
library(ggplot2)
install.packages("shiny")
install.packages("shinymaterial")
shiny::runApp('R/r_scripts/PA/apps/word_cloud')
install.packages("pacman")
install.packages("d3wordcloud")
remotes::install_github("jbkunst/d3wordcloud")
install.packages("tm")
install.packages("RCurl")
install.packages("stringr")
pacman::p_load(shinymaterial,shiny,d3wordcloud,dplyr,tm,DT,RCurl,stringr)
runApp('R/r_scripts/PA/apps/word_cloud')
getwd()
install.packages("R/r_scripts/PA/apps/word_cloud/d3wordcloud-master/", repos = NULL, type="source")
runApp('R/r_scripts/PA/apps/word_cloud')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readr)
wines <- read_csv("../data/winemag-data-130k-v2.csv")
wines
wines <- read_csv("../data/winemag-data-130k-v2.csv")[,-1]
wines
wines$variety
wines$title
wines %>% group_by(title)
wines %>% head
wines %>%
group_by(title) %>%
mutate(avg_price = mean(price,na.rm = T)) %>%
mutate(avg_score = mean(points,na.rm = T))
topwines <- wines %>%
group_by(title) %>%
mutate(avg_price = mean(price,na.rm = T)) %>%
mutate(avg_score = mean(points,na.rm = T)) %>%
arrange(points)
topwines %>% head
topwines <- wines %>%
group_by(title) %>%
mutate(avg_price = mean(price,na.rm = T)) %>%
mutate(avg_score = mean(points,na.rm = T)) %>%
arrange(desc(points))
topwines %>% head
topwines %>% filter(points == 100) %>% dim
topwines %>% filter(points == 100) %>% n()
topwines %>% filter(points == 100) %>% nrow()
topwines %>% filter(points >= 98) %>% nrow()
topwines %>% head
topwines %>% arrange(desc(points),price) %>% head
topwines %>%
mutate(value_for_money = avg_score/avg_price) %>%
arrange(value_for_money) %>% head()
topwines %>%
mutate(value_for_money = avg_price / avg_score) %>%
arrange(value_for_money) %>%
select(value_for_money,country,title,province,price,points) %>%
head()
topwines %>% arrange(desc(points),price) %>% head
topwines %>%
mutate(value_for_money = avg_price / avg_score) %>%
arrange(value_for_money) %>%
select(value_for_money,country,title,province,price,points) %>%
filter(points>95) %>%
head()
# Value for money
topwines %>%
mutate(value_for_money = avg_score/avg_price ) %>%
arrange(desc(value_for_money)) %>%
select(value_for_money,country,title,province,price,points) %>%
head()
# Add a filter
topwines %>%
mutate(value_for_money = avg_score/avg_price ) %>%
filter(points>95) %>%
arrange(desc(value_for_money)) %>%
select(value_for_money,country,title,province,price,points) %>%
head()
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
optioner
optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(nonbundle/2085-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(best_bid!=0) %>%
filter(nonbundle>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,nonbundle)
library(dplyr)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(nonbundle/2085-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(best_bid!=0) %>%
filter(nonbundle>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,nonbundle)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(dplyr)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(best_bid!=0) %>%
filter(nonbundle>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,strike)
S = 2085
optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,strike)
optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike)
library(plotly)
matcall <- optioner %>% spread(strike,mid)
library(tidyr)
matcall <- optioner %>% spread(strike,mid)
matcall
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike)
library(plotly)
library(tidyr)
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate)
library(plotly)
library(tidyr)
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
matcall
plot_ly(z=matcall %>% select(-exdata) %>% as.matrix(),
type="surface")
matcall
plot_ly(z=matcall %>% select(-exdate) %>% as.matrix(),
type="surface")
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
#filter(bid!=0) %>%
#filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate)
library(plotly)
library(tidyr)
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
idx <- which(!is.na(colSums((matcall[,-1]))))+1
plot_ly(z=matcall %>% select(-exdate) %>% as.matrix(),
type="surface")
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
#filter(moneyness<0.4) %>%
#filter(bid!=0) %>%
#filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate)
library(plotly)
library(tidyr)
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
idx <- which(!is.na(colSums((matcall[,-1]))))+1
plot_ly(z=matcall %>% select(-exdate) %>% as.matrix(),
type="surface")
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
#filter(bid_ask<5) %>%
#filter(moneyness<0.4) %>%
#filter(bid!=0) %>%
#filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate)
library(plotly)
library(tidyr)
matcall <- optioner %>% select(exdate,mid,strike) %>% spread(strike,mid)
idx <- which(!is.na(colSums((matcall[,-1]))))+1
X <- matcall %>% select(-exdate) %>% as.matrix()
plot_ly(z=X[,idx],
type="surface")
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate)
library(plotly)
library(tidyr)
plot_ly(dfcall,
x= nonbundle,
y= mid,
type="scatter",
mode = "markers",
group= exdate)
plot_ly(optioner,
x= strike,
y= mid,
type="scatter",
mode = "markers",
group= exdate)
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
group= ~exdate)
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
color= ~exdate)
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
symbol= ~exdate)
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
symbols= ~exdate)
optioner$exdate
optioner$exdate %>% as.character()
optioner$exdate %>% as.character() %>% as.factor()
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate) %>%
mutate(exdate = as.factor(as.character(exdate)))
library(plotly)
library(tidyr)
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
symbols= ~exdate)
optioner$exdate
plot_ly(optioner,
x= ~strike,
y= ~mid,
type="scatter",
mode = "markers",
color = ~exdate)
optioner <- read_excel("../data/xl/SPXoptions.xlsx")
S = 2085
optioner_filtered<-optioner %>% mutate(bid_ask = bid - ask) %>%
mutate(moneyness = abs(strike/S-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(bid!=0) %>%
filter(strike>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,bid,ask,strike,exdate) %>%
mutate(exdate = as.factor(as.character(exdate)))
df <- optioner %>%
mutate(exdate = as.Date(exdate)-as.Date(date)) %>%
mutate(exdate = as.numeric(exdate)/365) %>%
mutate(b_bool =if_else(bid!=0,"Bid>0","Bid=0") %>% as.factor()) %>%
mutate(moneyness = abs(strike/S_init-1)) %>%
mutate(bid_ask = bid-ask)
S_init = 2080.15
df <- optioner %>%
mutate(exdate = as.Date(exdate)-as.Date(date)) %>%
mutate(exdate = as.numeric(exdate)/365) %>%
mutate(b_bool =if_else(bid!=0,"Bid>0","Bid=0") %>% as.factor()) %>%
mutate(moneyness = abs(strike/S_init-1)) %>%
mutate(bid_ask = bid-ask)
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbols = ~b_bool)
df <- optioner %>%
mutate(exdate = as.Date(exdate)-as.Date(date)) %>%
mutate(exdate = as.numeric(exdate)/365) %>%
mutate(b_bool =if_else(bid!=0,"Bid>0","Bid=0") %>% as.factor()) %>%
mutate(moneyness = abs(strike/S_init-1)) %>%
mutate(bid_ask = ask-bid)
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbols = ~b_bool)
plot_ly(df, x = ~moneyness, y= ~bid_ask, color = ~b_bool)
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbol =  = ~b_bool)
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbol =  ~b_bool)
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbol =  ~b_bool, type = "scatter")
plot_ly(df, x = ~moneyness, y= ~bid_ask, symbol =  ~b_bool, type = "scatter", mode = "markers")
plot_ly(df,
x = ~moneyness,
y= ~bid_ask,
symbol = ~b_bool,
type = "scatter",
mode = "markers") %>%
layout(xaxis=list(title="|K/S-1|"), yaxis= list(title="Bid-ask spread"),
shapes = list(
list(type = "rect",
fillcolor = 'rgb(0,128,128)', line = list(color = 'rgb(0,128,128)'), opacity = 0.3,
x0 = 0.4, x1 = 1, xref = "x",
y0 = 0, y1 = 20, yref = "y"),
list(type = "rect",
fillcolor = 'rgb(255,165,0)', line = list(color = 'rgb(255,165,0)'), opacity = 0.3,
x0 = 0, x1 = 1, xref = "x",
y0 = 5, y1 = 20, yref = "y"))
b_bool =as.factor(b$x)#*2 + as.numeric(df$best_bid==0)
# , color= b_bool, colors = jbcolor[c(2,5)]
plot_ly(x = abs(df$nonbundle/S_init-1), y = df$best_offer-df$best_bid) %>%
add_markers(symbol = b_bool, name = "hollow", alpha=0.9) %>%
)
plot_ly(df,
x = ~moneyness,
y= ~bid_ask,
symbol = ~b_bool,
type = "scatter",
mode = "markers") %>%
layout(xaxis=list(title="|K/S-1|"), yaxis= list(title="Bid-ask spread"),
shapes = list(
list(type = "rect",
fillcolor = 'rgb(0,128,128)', line = list(color = 'rgb(0,128,128)'), opacity = 0.3,
x0 = 0.4, x1 = 1, xref = "x",
y0 = 0, y1 = 20, yref = "y"),
list(type = "rect",
fillcolor = 'rgb(255,165,0)', line = list(color = 'rgb(255,165,0)'), opacity = 0.3,
x0 = 0, x1 = 1, xref = "x",
y0 = 5, y1 = 20, yref = "y")))
library(readr)
library(dplyr)
wines <- read_csv("../data/winemag-data-130k-v2.csv")[,-1]
# En masse tie-breakers
topwines <- wines %>%
group_by(title) %>%
mutate(avg_price = mean(price,na.rm = T)) %>%
mutate(avg_score = mean(points,na.rm = T)) %>%
arrange(desc(points))
wines$country %>% unique()
wines$province %>% unique()
